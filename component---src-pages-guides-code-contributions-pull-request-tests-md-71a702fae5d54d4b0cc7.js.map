{"version":3,"file":"component---src-pages-guides-code-contributions-pull-request-tests-md-71a702fae5d54d4b0cc7.js","mappings":"gTAQaA,EAAe,GACtBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,0CACA,+PACA,iHACA,eACE,GAAM,4BADR,6BAGA,+ZACE,cAAGC,WAAW,IACZ,KAAQ,oCADV,sCADF,2BAIA,eACE,GAAM,oBADR,qBAGA,gQACA,eACE,GAAM,qBADR,sBAGA,wHACA,eACE,GAAM,cADR,eAGA,+PACA,eACE,GAAM,qBADR,sBAGA,yKACA,oBACE,eAAIA,WAAW,MAAf,6EACA,eAAIA,WAAW,MAAf,iFACA,eAAIA,WAAW,MAAf,8IAEF,eACE,GAAM,gBADR,iBAGA,gRACA,oBACE,eAAIA,WAAW,MAAf,uBACA,eAAIA,WAAW,MAAf,uBACA,eAAIA,WAAW,MAAf,2BAEF,eACE,GAAM,gBADR,iBAGA,qNACA,eACE,GAAM,oBADR,qBAGA,2PACA,eACE,GAAM,0BADR,2BAGA,kPACA,oBACE,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,gEADQ,4CAGpB,eAAIA,WAAW,MAAf,oDACA,eAAIA,WAAW,MAAf,uCAEF,sFAAuE,cAAGA,WAAW,IACjF,KAAQ,sEAD2D,gBAAvE,MAGA,eACE,GAAM,oCADR,qCAGA,6FACA,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,0BAApB,uEACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,gCAApB,2CAEF,mCAAoB,uBAAYA,WAAW,KAAvB,2BAApB,QAA+F,uBAAYA,WAAW,KAAvB,+CAC/F,mBAAG,uBAAYA,WAAW,KAAvB,mBAAH,kGACA,eACE,GAAM,gBADR,iBAGA,2HACA,wHACA,eACE,GAAM,yBADR,0BAGA,yMACA,6HACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,2LAOL,8SAEA,8GAKJJ,EAAWK,gBAAiB","sources":["webpack://dev-site-documentation-template/./src/pages/guides/code-contributions/pull-request-tests.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-contributor/commerce-contributor/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Pull request tests`}</h1>\n    <p>{`Automated testing infrastructure runs all required automated tests against code in pull requests. You can trigger automated tests by adding a comment to a pull request. Tests are represented both as pull request statuses and checks.`}</p>\n    <p>{`The following sections describe the different kinds of tests that are currently available.`}</p>\n    <h2 {...{\n      \"id\": \"semantic-version-checker\"\n    }}>{`Semantic version checker`}</h2>\n    <p>{`Semantic Version Checker is a test that compares the changed code against the mainline and detects levels of code changes. It shows a list of changes grouped by the class (level) of changes (MAJOR, MINOR, PATCH) with an explanation of the change (Class was removed, `}{`[public]`}{` Method implementation changed, `}{`[private]`}{` Property has been removed etc.) The allowed level is PATCH.\nSee `}<a parentName=\"p\" {...{\n        \"href\": \"backward-compatibility-policy.md\"\n      }}>{`Backward Compatibility Development`}</a>{` for more information.`}</p>\n    <h2 {...{\n      \"id\": \"functional-tests\"\n    }}>{`Functional tests`}</h2>\n    <p>{`Functional Tests are PHPUnit-based tests that check functional behavior from the perspective of a user. They click buttons and links in a browser, fill and submit forms, verify what is displayed in the browser window like real users.`}</p>\n    <h2 {...{\n      \"id\": \"sample-data-tests\"\n    }}>{`Sample data tests`}</h2>\n    <p>{`Sample Data Tests are functional tests that run on Magento Open Source with Sample Data included.`}</p>\n    <h2 {...{\n      \"id\": \"unit-tests\"\n    }}>{`Unit tests`}</h2>\n    <p>{`Unit tests are PHPUnit-based (for PHP) and Jasmine-based (for JS) tests that check the behavior of single methods of Magento Open Source classes. The purpose is to validate that each unit of Magento Open Source performs as designed.`}</p>\n    <h2 {...{\n      \"id\": \"integration-tests\"\n    }}>{`Integration tests`}</h2>\n    <p>{`Integration Tests are PHPUnit-based tests that check the behavior of a group of Magento Open Source components. They include three types of tests:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Standard Integration tests that check behavior on an installed instance.`}</li>\n      <li parentName=\"ul\">{`Setup Integration tests that check behavior during the installation process.`}</li>\n      <li parentName=\"ul\">{`Integration Integrity tests that check the consistency of an installed instance (for example, configuration files and database schemes).`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"webapi-tests\"\n    }}>{`WebAPI tests`}</h2>\n    <p>{`WebAPI Tests are functional tests that check the behavior of Web API endpoints. They send requests to endpoints of an installed instance and then check the response received and the state of the instance. Currently they include three kinds of tests:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`SOAP Web API tests`}</li>\n      <li parentName=\"ul\">{`REST Web API tests`}</li>\n      <li parentName=\"ul\">{`GraphQL WEB API tests`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"static-tests\"\n    }}>{`Static tests`}</h2>\n    <p>{`Static Tests are a set of different checks that analyze every single file of the code base separately. Most of them analyze the whole code base, whereas some run only against the change set.`}</p>\n    <h2 {...{\n      \"id\": \"database-compare\"\n    }}>{`Database compare`}</h2>\n    <p>{`Database Compare is a test that compares the database schema and data between a freshly installed instance (from the pull request code) and another instance that was upgraded to the PR code from the latest minor release version.`}</p>\n    <h2 {...{\n      \"id\": \"component-health-index\"\n    }}>{`Component health index`}</h2>\n    <p>{`Component Health Index is a test that analyses code quality and calculates a weighted health index (100 is great, lower is worse) for each Component (module). The index is calculated based on three groups of indicators:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://pdepend.org/documentation/software-metrics/index.html\"\n        }}>{`General code quality indicators (GCQI)`}</a></li>\n      <li parentName=\"ul\">{`Magento-specific code quality indicators (MSCQ)`}</li>\n      <li parentName=\"ul\">{`Legacy API usage indicators (LAI)`}</li>\n    </ul>\n    <p>{`Additional information on Automated Testing can be found on the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/wiki/Magento-Automated-Testing\"\n      }}>{`project wiki`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"running-tests-for-a-pull-request\"\n    }}>{`Running tests for a pull request`}</h2>\n    <p>{`Automated tests can be triggered manually with an appropriate comment:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`@magento run all tests`}</inlineCode>{`—run or re-run all required tests against the pull request changes`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`@magento run <test-build(s)>`}</inlineCode>{`—run or re-run specific test build(s)`}</li>\n    </ul>\n    <p>{`For example: `}<inlineCode parentName=\"p\">{`@magento run Unit Tests`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`@magento run Unit Tests,Integration Tests`}</inlineCode></p>\n    <p><inlineCode parentName=\"p\">{`<test-build(s)>`}</inlineCode>{` is a comma-separated list of build names. Build names can be copied from the Checks section.`}</p>\n    <h2 {...{\n      \"id\": \"test-results\"\n    }}>{`Test results`}</h2>\n    <p>{`The build progress and test results are indicated by check runs under the pull request conversation.`}</p>\n    <p>{`Click on the \"Details\" link to see the results summary and links to corresponding Allure reports.`}</p>\n    <h2 {...{\n      \"id\": \"related-pull-requests\"\n    }}>{`Related pull requests`}</h2>\n    <p>{`When a contribution requires changes to more than one repository merged simultaneously, such pull requests should be linked using the \"Related Pull Requests\" description section.`}</p>\n    <p>{`The related pull requests should be specified in the pull request description in the following format:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`### Related Pull Requests\nhttps://github.com/<organization>/<repository>/pull/<pull request number>\n<links to other realted PRs>\n<!-- related pull request placeholder -->\n`}</code></pre>\n    <p>{`When the tests are launched against a pull request that contains links to related pull request in the description, the related pull requests branches will be used as a code base for the tests instead of mainline.\nCheck runs will be updated for each of the related pull requests.`}</p>\n    <p>{`Related pull requests are delivered to Magento Open Source repositories simultaneously.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}